% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/4odtr.R
\name{odtr}
\alias{odtr}
\title{Function that computes ODTR}
\usage{
odtr(W, W_for_g = 1, A, Y, ab = NULL, V, newV = NULL,
  blip.SL.library, dopt.SL.library = NULL, QAW.SL.library, risk.type,
  grid.size = 100, SL.type, kappa = NULL, QAW = NULL, VFolds = 10,
  moMain_model = NULL, moCont_model = NULL, g1W = NULL)
}
\arguments{
\item{W}{Data frame of observed baseline covariates}

\item{W_for_g}{Data frame of observed baseline covariates used for predicting g1W (probability of treatment). Could also be 1 if using mean of A as estimate of g1W.}

\item{A}{Vector of treatment}

\item{Y}{Vector of treatment (continuous or binary)}

\item{V}{Data frame of observed baseline covariates (subset of W) used to design the ODTR}

\item{blip.SL.library}{SuperLearner library for estimating blip}

\item{QAW.SL.library}{SuperLearner library for estimating the outcome regression}

\item{risk.type}{Risk type in order to pick optimal combination of coefficients to combine the candidate algorithms. For (1) MSE risk use "CV MSE" and for (2) E[Ydopt] risk use "CV IPCWDR" (for E[Ydopt] estimated using double-robust IPTW) or "CV TMLE" (for E[Ydopt] estimates using TMLE)}

\item{grid.size}{Grid size for \code{\link[hitandrun:simplex.sample]{simplex.sample()}} function to create possible combinations of coefficients}

\item{SL.type}{Blip-based ("blip") or vote-based SuperLearner ("vote"). Note that if SL.type is "vote" then cannot put in kappa.}

\item{kappa}{For ODTR with resource constriants, kappa is the proportion of people in the population who are allowed to receive treatment. Default is \code{NULL}.}

\item{QAW}{True outcome regression E[Y|A,W]. Useful for simulations. Default is \code{NULL}.}

\item{VFolds}{Number of folds to use in cross-validation. Default is 10.}

\item{moMain_model}{for DynTxRegime modeling outcome regression}

\item{moCont_model}{for DynTxRegime modeling contrast}

\item{g1W}{user-supplied vector of g1W}
}
\value{

}
\description{
Given a W, A, Y dataset, this function will compute the estimated ODTR using SuperLearner. If a QAW function is provided that computes the true E[Y|A,W] (e.g., if simulating), the function will also return the true treatment under the optimal rule and other metrics of evaluating the estimated optimal rule's performance.
}
\examples{
## Example
library(SuperLearner)
library(hitandrun)
ObsData = subset(DGP_smooth2(1000), select = -c(A_star, Y_star))
W = subset(ObsData, select = -c(A,Y))
V = W
A = ObsData$A
Y = ObsData$Y

# blip-based estimate of ODTR with risk function CV-TMLE
odtr(W = W, W_for_g = subset(W, select = c(W1, W2)), A = A, Y = Y, V = W, blip.SL.library = "SL.blip.correct_smooth", QAW.SL.library = "SL.QAW.correct_smooth", risk.type = "CV TMLE", SL.type = 'blip')


}
\references{
Luedtke, Alexander R., and Mark J. van der Laan. "Super-learning of an optimal dynamic treatment rule." \emph{The international journal of biostatistics} 12.1 (2016): 305-332.
Coyle, J.R. (2017). Jeremy Coyle, “Computational Considerations for Targeted Learning” PhD diss., University of California, Berkeley 2017 \url{https://escholarship.org/uc/item/9kh0b9vm}.
Eric Polley, Erin LeDell, Chris Kennedy and Mark van der Laan (2018). SuperLearner: Super Learner Prediction. R package version 2.0-24. \url{https://CRAN.R-project.org/package=SuperLearner}.
}
