\documentclass[11pt]{article}
%\usepackage[showframe]{geometry}
\usepackage[table]{xcolor}
\usepackage{caption}
\usepackage{lscape,verbatim,mathrsfs}
\usepackage{graphics,amsmath,pstricks}
\usepackage{amssymb,enumerate}
\usepackage{amsbsy,amsmath,amsthm,amsfonts, amssymb}
\usepackage{graphicx, rotate, array}
\usepackage{geometry,multirow}
\usepackage{color,soul}
\usepackage{float}
%\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
%\renewcommand{\baselinestretch}{1.9}
\usepackage{tcolorbox}
\renewcommand{\familydefault}{cmss}
\textwidth=6.65in \textheight=9.7in
\parskip=.025in
\parindent=0in
\oddsidemargin=-0.1in \evensidemargin=-.1in \headheight=-.6in
\footskip=0.5in \DeclareMathOperator*{\argmax}{argmax}
\DeclareMathOperator*{\argmin}{argmin}


\begin{document}


<<libs_and_funs, echo = F, message = F,warning = F>>=
library(dplyr)
library(ggplot2)
library(xtable)
library('latex2exp')
#source("/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/R/7showResults.R")
#source('/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/R/1DGPfunctions.R')
@






bin

<<DGP_bin, echo = F>>=
# load DGP_bin stuff
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/true values/DGP_AL_bin_true_values.RData")
@

<<EYdopt_DGP_AL_bin_step1a, echo = F, results = 'asis', warning = F, fig.height=5.5, fig.width=12>>=
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/EYdopt/results/EYdopt_step2_bin.RData")
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/EYdopt/results/EYdopt_step3_bin.RData")
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/EYdopt/results/EYdopt_step4_bin.RData")
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/EYdopt/results/EYdopt_step5_bin.RData")


make_table_EYdopt = function(EYdopt, truevalues) {

  truth = truevalues$EYd_star
  Psi = data.frame(EYdopt[,grep("Psi_", colnames(EYdopt))])
  if(length(Psi[,grep("LTMLE.tmle$", colnames(Psi))]) == 0) Psi$Psi_LTMLE = Psi$Psi_LTMLE else Psi$Psi_LTMLE = Psi[,grep("LTMLE.tmle$", colnames(Psi))]
  if(length(Psi[,grep("LTMLE.tmle_", colnames(Psi))]) == 0) Psi$Psi_LTMLE_dopt0 = Psi$Psi_LTMLE_dopt0 else Psi$Psi_LTMLE_dopt0 = Psi[,grep("LTMLE.tmle_", colnames(Psi))]

  Psi$Psi_LTMLE.tmle = Psi$LTMLE.tmle = Psi$Psi_LTMLE.tmle_dopt0 = Psi$LTMLE.tmle_dopt0 = NULL
  colnames(Psi) = substr(colnames(Psi), start = 5, stop = nchar(colnames(Psi)))

  CI = EYdopt[,grep(colnames(EYdopt), pattern = "^CI")]

  # Compare EnYdn to E0Ydn
  Bias = colMeans(Psi[,c("unadj", "gcomp", "IPTW", "IPTW_DR", "LTMLE", "TMLE")] - EYdopt[,"EY0dn"])
  Bias = c(Bias, CV.TMLE = mean(Psi[,c("CV.TMLE")] - EYdopt[,"EY0dn_CVTMLE"]))
  Variance = diag(var(Psi[,c("unadj", "gcomp", "IPTW", "IPTW_DR", "LTMLE", "TMLE", "CV.TMLE")]))
  MSE = colMeans((Psi[,c("unadj", "gcomp", "IPTW", "IPTW_DR", "LTMLE", "TMLE")] - EYdopt[,"EY0dn"])^2)
  MSE = c(MSE, CV.TMLE = mean((Psi[,c("CV.TMLE")] - EYdopt[,"EY0dn_CVTMLE"])^2))
  results_sampspec = data.frame(Bias, Variance, MSE)
  Coverage = colMeans(EYdopt[,"EY0dn"] > CI[,grep(colnames(CI), pattern = "1$")] & EYdopt[,"EY0dn"] < CI[,grep(colnames(CI), pattern = "2$")])
  Coverage["CI_CV.TMLE1"] = mean(EYdopt[,"EY0dn_CVTMLE"] > CI[,"CI_CV.TMLE1"] & EYdopt[,"EY0dn_CVTMLE"] < CI[,"CI_CV.TMLE2"])
  names(Coverage) = substr(names(Coverage), start = 4, stop = nchar(names(Coverage))-1)
  results_sampspec$Coverage = NA
  results_sampspec[names(Coverage),"Coverage"] = Coverage
  rownames(results_sampspec) = paste0(rownames(results_sampspec), "_sampspec")

  # Compare EnYdn or EnYd0 to E0Yd0
  Bias = colMeans(Psi - truth)
  Variance = diag(var(Psi))
  MSE = colMeans((Psi - truth)^2)
  results = data.frame(Bias, Variance, MSE)
  Coverage_dn = colMeans(truth > CI[,grep(colnames(CI), pattern = "1$")] & truth < CI[,grep(colnames(CI), pattern = "2$")])
  Coverage_d0 = colMeans(truth > CI[,grep(colnames(CI), pattern = "1_")] & truth < CI[,grep(colnames(CI), pattern = "2_")])
  Coverage_EY0dn = colMeans(EYdopt[,"EY0dn"] > CI[,grep(colnames(CI), pattern = "1$")] & EYdopt[,"EY0dn"] < CI[,grep(colnames(CI), pattern = "2$")])
  names(Coverage_dn) = substr(names(Coverage_dn), start = 4, stop = nchar(names(Coverage_dn))-1)
  names(Coverage_d0) = paste0(substr(names(Coverage_d0), start = 4, stop = nchar(names(Coverage_d0))-7), "_dopt0")
  results[names(Coverage_dn),"Coverage"] = Coverage_dn
  results[names(Coverage_d0),"Coverage"] = Coverage_d0

 results = round(rbind(results, results_sampspec), 4)
  results[is.na(results)] = "-"

  return(results)


}

@



<<echo = F>>=
make_plot_EYdopt = function(EYdopt, truevalues, title) {

  truth = truevalues$EYd_star
  Psi = data.frame(EYdopt[,grep("Psi_", colnames(EYdopt))])
  if(length(Psi[,grep("LTMLE.tmle$", colnames(Psi))]) == 0) Psi$Psi_LTMLE = Psi$Psi_LTMLE else Psi$Psi_LTMLE = Psi[,grep("LTMLE.tmle$", colnames(Psi))]
  if(length(Psi[,grep("LTMLE.tmle_", colnames(Psi))]) == 0) Psi$Psi_LTMLE_dopt0 = Psi$Psi_LTMLE_dopt0 else Psi$Psi_LTMLE_dopt0 = Psi[,grep("LTMLE.tmle_", colnames(Psi))]

  Psi$Psi_LTMLE.tmle = Psi$LTMLE.tmle = Psi$Psi_LTMLE.tmle_dopt0 = Psi$LTMLE.tmle_dopt0 = NULL
  colnames(Psi) = substr(colnames(Psi), start = 5, stop = nchar(colnames(Psi)))

  Psi = Psi[apply(Psi, 2, function(x) sum(is.na(x)) == 0)]
  df = data.frame(Estimator = factor(colnames(Psi), levels = colnames(Psi)),
                  Estimates = colMeans(Psi),
                  minQ = apply(Psi, 2, quantile, probs = 0.025),
                  maxQ = apply(Psi, 2, quantile, probs = 0.975))
  df$d_type = NA
  df$d_type[grep("0", df$Estimator)] = "d0"
  df$d_type[is.na(df$d_type)] = "dn"
  df$d_type = as.factor(df$d_type)

  df$Estimator = as.character(df$Estimator)
  df$Estimator[grep("0", df$Estimator)] = substr(df$Estimator[grep("0", df$Estimator)], start = 1, stop = nchar(df$Estimator[grep("0", df$Estimator)])-6)
  df$Estimator = factor(df$Estimator)

  pd <- position_dodge(width = 0.7)
  df %>%
    ggplot(aes(x = Estimator, y = Estimates, group = d_type)) +
    geom_point(aes(shape = d_type), position = pd, size = 2.5) +
    scale_shape_discrete(name = "Rule", labels = c("dn" = "dn",
                                                   "d0" = "d0")) +
   # geom_point(aes(shape = Risk), size = 3.5, position = pd) +
    geom_errorbar(aes(ymin = minQ, ymax = maxQ), width = .4, position = pd) +
    geom_hline(yintercept = mean(EYdopt[,"EY0dn_CVTMLE"]), colour = "red")+#, alpha=I(0.1)) +
    geom_hline(yintercept = mean(EYdopt[,"EY0dn"]), colour = "blue")+#, alpha=I(0.1)) +
    geom_hline(yintercept = (truth), colour = "black") +
    scale_x_discrete(name ="Estimator") +
    ylab(expression(paste("Black = ", E["0"],"[",Y[d["0"]^{"*"}],"]; ", "Blue = ", E["0"],"[",Y[d["n"]^{"*"}],"]; ", "Red = CV TMLE ", E["0"],"[",Y[d["n"]^{"*"}],"]"))) +
    ggtitle(title) +
    theme_bw() +
    theme(panel.border = element_blank())

}

make_plot_EYdopt(EYdopt = EYdopt_step2_bin, truevalues = DGP_AL_bin_true_values, title = "Incorrect GLMs")
make_plot_EYdopt(EYdopt = EYdopt_step3_bin, truevalues = DGP_AL_bin_true_values, title = "Non-overfit SL")
make_plot_EYdopt(EYdopt = EYdopt_step4_bin, truevalues = DGP_AL_bin_true_values, title = "Overfit SL")
make_plot_EYdopt(EYdopt = EYdopt_step5_bin, truevalues = DGP_AL_bin_true_values, title = "Very overfit SL")

@

<<>>=
# Incorrect GLM
make_table_EYdopt(EYdopt = EYdopt_step2_bin, truevalues = DGP_AL_bin_true_values)

# Non-overfit SL
make_table_EYdopt(EYdopt = EYdopt_step3_bin, truevalues = DGP_AL_bin_true_values)

# Overfit SL
make_table_EYdopt(EYdopt = EYdopt_step4_bin, truevalues = DGP_AL_bin_true_values)

# Very overfit SL (with RF)
make_table_EYdopt(EYdopt = EYdopt_step5_bin, truevalues = DGP_AL_bin_true_values)


@




\end{document}
