\documentclass[11pt]{article}
%\usepackage[showframe]{geometry}
\usepackage[table]{xcolor}
\usepackage{caption}
\usepackage{lscape,verbatim,mathrsfs}
\usepackage{graphics,amsmath,pstricks}
\usepackage{amssymb,enumerate}
\usepackage{amsbsy,amsmath,amsthm,amsfonts, amssymb}
\usepackage{graphicx, rotate, array}
\usepackage{geometry,multirow}
\usepackage{color,soul}
\usepackage{float}
%\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
%\renewcommand{\baselinestretch}{1.9}
\usepackage{tcolorbox}
\renewcommand{\familydefault}{cmss}
\textwidth=6.65in \textheight=9.7in
\parskip=.025in
\parindent=0in
\oddsidemargin=-0.1in \evensidemargin=-.1in \headheight=-.6in
\footskip=0.5in \DeclareMathOperator*{\argmax}{argmax}
\DeclareMathOperator*{\argmin}{argmin}


\begin{document}



<<echo = F, message = F,warning = F>>=
library(dplyr)
library(ggplot2)
library(xtable)
library(ggpubr)
library('latex2exp')
#source("/Users/linamontoya/Box Sync/Dissertation/R/7showResults.R")
#source('/Users/linamontoya/Box Sync/Dissertation/R/1DGPfunctions.R')
@







\section{Description of DGP}

\begin{align*}
W_1,W_2,W_3,W_4 &\sim Normal(\mu=0,\sigma^2=1) \\
A &\sim Bernoulli(p=0.5) \\
Y &\sim Bernoulli(p) \text{ .}\\
\end{align*}
\begin{align*}
p &= 0.5*logit^{-1} (1-W_1^2  + 3W_2  + 5W_3^2 A - 4.45A)+0.5logit^{-1} (-0.5- W_3  + 2W_1 W_2  + 3|W2|A - 1.5A) \text{ ,}
\end{align*}
True blip function is:
\begin{align*}
B_0 (W)= & 0.5[logit^{-1} (1-W_1^2  + 3W_2  + 5W_3^2  - 4.45)+logit^{-1} (-0.5- W_3  + 2W_1 W_2  + 3|W2|  - 1.5)\\
& - logit^{-1} (1-W_1^2  + 3W_2 )+logit^{-1} (-0.5- W_3  + 2W_1 W_2 )] \text{ .}
\end{align*}


\section{Library legend}

\begin{itemize}
\item Simple - GLMs
\begin{itemize}
\item QAW.SL.library = linear model with $W_j$ and A as main terms and $W_j$*A interaction for each $j$
\item blip.SL.library = linear model with main terms $W_j$ for each $j$
\end{itemize}
\item Medium - ML + GLMs not aggressive
\begin{itemize}
\item QAW.SL.library = GLMs library AND SL.glm, SL.mean, SL.glm.interaction, SL.earth, SL.nnet, SL.svm, SL.rpart
\item blip.SL.library = GLMs library AND SL.glm, SL.mean, SL.glm.interaction, SL.earth, SL.nnet, SL.svm, SL.rpart
\end{itemize}
\item Aggressive - ML + GLMs not aggressive
\begin{itemize}
\item QAW.SL.library = ML + GLMs aggressive library AND SL.randomForest
\item blip.SL.library = ML + GLMs aggressive library AND SL.randomForest
\end{itemize}
\end{itemize}



<<DGP_bin, echo = F>>=
# load DGP_bin stuff
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/true values/DGP_bin_complex_true_values.RData")
@

<<echo = F, warning = F>>=
load(file = "/Users/linamontoya/Box Sync/Dissertation/simulations/EYdopt/results/EYdopt_bin_simple.RData")
#load(file = "/Users/linamontoya/Box Sync/Dissertation/simulations/EYdopt/results/EYdopt_bin_medium.RData")
load(file = "/Users/linamontoya/Box Sync/Dissertation/simulations/EYdopt/results/EYdopt_bin_medium_HAL.RData")
#load(file = "/Users/linamontoya/Box Sync/Dissertation/simulations/EYdopt/results/EYdopt_bin_most.RData")
load(file = "/Users/linamontoya/Box Sync/Dissertation/simulations/EYdopt/results/EYdopt_bin_most_HAL.RData")

#results = EYdopt_bin_simple

#E0Yd0
E0Yd0 = DGP_bin_complex_true_values$EYd_star

make_table_fun = function(results) {

  #EnYdn
  EnYdn = do.call('rbind', lapply(results, function(x) x$EnYdn[grep("Psi_", rownames(x$EnYdn)), "EYd"]))
  colnames(EnYdn) = row.names(results[[1]]$EnYdn)[grep("Psi_", rownames(results[[1]]$EnYdn))]
  CI_EnYdn = do.call('rbind', lapply(results, function(x) x$EnYdn[grep("CI_", rownames(x$EnYdn)), "EYd"]))
  colnames(CI_EnYdn) = row.names(results[[1]]$EnYdn)[grep("CI_", rownames(results[[1]]$EnYdn))]

  #EnYdn for E0Yd0
  bias_EnYdn_for_E0Yd0 = colMeans(EnYdn - E0Yd0)
  var_EnYdn_for_E0Yd0 = diag(var(EnYdn))
  MSE_EnYdn_for_E0Yd0 = bias_EnYdn_for_E0Yd0^2 + var_EnYdn_for_E0Yd0
  coverage_EnYdn_for_E0Yd0 = colMeans(E0Yd0 > CI_EnYdn[,grep("1", colnames(CI_EnYdn))] & E0Yd0 < CI_EnYdn[,grep("2", colnames(CI_EnYdn))])
  table_EnYdn_for_E0Yd0 = data.frame(Estimator = c("Unadjusted", "G-comp.", "IPTW", "IPTW-DR", "TMLE", "CV-TMLE"),
                                     Bias = bias_EnYdn_for_E0Yd0,
                                     Variance = var_EnYdn_for_E0Yd0,
                                     MSE = MSE_EnYdn_for_E0Yd0,
                                     Coverage = NA)
  table_EnYdn_for_E0Yd0 = round(table_EnYdn_for_E0Yd0[,sapply(table_EnYdn_for_E0Yd0, class) == "numeric"], 4)
  names(coverage_EnYdn_for_E0Yd0) = paste0("Psi_", substr(names(coverage_EnYdn_for_E0Yd0), start = 4, stop = nchar(names(coverage_EnYdn_for_E0Yd0))-1))
  table_EnYdn_for_E0Yd0[names(coverage_EnYdn_for_E0Yd0),"Coverage"] = coverage_EnYdn_for_E0Yd0
  table_EnYdn_for_E0Yd0$Coverage = paste0(table_EnYdn_for_E0Yd0$Coverage*100, "%")
  table_EnYdn_for_E0Yd0$Coverage[table_EnYdn_for_E0Yd0$Coverage == "NA%"] = "-"
  table_EnYdn_for_E0Yd0 = table_EnYdn_for_E0Yd0[-which(rownames(table_EnYdn_for_E0Yd0) == "Psi_unadj"),]

  #EnYd0
  EnYd0 = do.call('rbind', lapply(results, function(x) x$EnYd0[grep("Psi_", rownames(x$EnYd0)), "EYd"]))
  colnames(EnYd0) = row.names(results[[1]]$EnYd0)[grep("Psi_", rownames(results[[1]]$EnYd0))]
  CI_EnYd0 = do.call('rbind', lapply(results, function(x) x$EnYd0[grep("CI_", rownames(x$EnYd0)), "EYd"]))
  colnames(CI_EnYd0) = row.names(results[[1]]$EnYd0)[grep("CI_", rownames(results[[1]]$EnYd0))]

  #EnYd0 for E0Yd0
  bias_EnYd0_for_E0Yd0 = colMeans(EnYd0 - E0Yd0)
  var_EnYd0_for_E0Yd0 = diag(var(EnYd0))
  MSE_EnYd0_for_E0Yd0 = bias_EnYd0_for_E0Yd0^2 + var_EnYd0_for_E0Yd0
  coverage_EnYd0_for_E0Yd0 = colMeans(E0Yd0 > CI_EnYd0[,grep("1", colnames(CI_EnYd0))] & E0Yd0 < CI_EnYd0[,grep("2", colnames(CI_EnYd0))])
  table_EnYd0_for_E0Yd0 = data.frame(Estimator = c("Unadjusted", "G-comp.", "IPTW", "IPTW-DR", "TMLE", "CV-TMLE"),
                                     Bias = bias_EnYd0_for_E0Yd0,
                                     Variance = var_EnYd0_for_E0Yd0,
                                     MSE = MSE_EnYd0_for_E0Yd0,
                                     Coverage = NA)
  table_EnYd0_for_E0Yd0 = round(table_EnYd0_for_E0Yd0[,sapply(table_EnYd0_for_E0Yd0, class) == "numeric"], 4)
  names(coverage_EnYd0_for_E0Yd0) = paste0("Psi_", substr(names(coverage_EnYd0_for_E0Yd0), start = 4, stop = nchar(names(coverage_EnYd0_for_E0Yd0))-1))
  table_EnYd0_for_E0Yd0[names(coverage_EnYd0_for_E0Yd0),"Coverage"] = coverage_EnYd0_for_E0Yd0
  table_EnYd0_for_E0Yd0$Coverage = paste0(table_EnYd0_for_E0Yd0$Coverage*100, "%")
  table_EnYd0_for_E0Yd0$Coverage[table_EnYd0_for_E0Yd0$Coverage == "NA%"] = "-"
  table_EnYd0_for_E0Yd0 = table_EnYd0_for_E0Yd0[-which(rownames(table_EnYd0_for_E0Yd0) == "Psi_unadj"),]

  #E0Ydn
  E0Ydn = do.call('rbind', lapply(results, function(x) x$E0Ydn[, "EYd"]))
  colnames(E0Ydn) = row.names(results[[1]]$E0Ydn)

  #EnYdn for E0Ydn
  bias_EnYdn_for_E0Ydn = colMeans(EnYdn[,-grep("CV.TMLE", colnames(EnYdn))] - E0Ydn[,"E0Ydn.nonCVTMLE"])
  bias_EnYdn_for_E0Ydn = c(bias_EnYdn_for_E0Ydn, Psi_CV.TMLE = mean(EnYdn[,grep("CV.TMLE", colnames(EnYdn))] - E0Ydn[,"E0Ydn.CVTMLE"]))
  var_EnYdn_for_E0Ydn = diag(var(EnYdn))
  MSE_EnYdn_for_E0Ydn = bias_EnYdn_for_E0Ydn^2 + var_EnYdn_for_E0Ydn
  CI_EnYdn1 = CI_EnYdn[,grep("1", colnames(CI_EnYdn))]
  CI_EnYdn2 = CI_EnYdn[,grep("2", colnames(CI_EnYdn))]
  coverage_EnYdn_for_E0Ydn = colMeans(E0Ydn[,"E0Ydn.nonCVTMLE"] > CI_EnYdn1[,-grep("CV.TMLE", colnames(CI_EnYdn1))] & E0Ydn[,"E0Ydn.nonCVTMLE"] < CI_EnYdn2[,-grep("CV.TMLE", colnames(CI_EnYdn2))])
  coverage_EnYdn_for_E0Ydn = c(coverage_EnYdn_for_E0Ydn, CI_CV.TMLE1 = mean(E0Ydn[,"E0Ydn.CVTMLE"] > CI_EnYdn1[,grep("CV.TMLE", colnames(CI_EnYdn1))] & E0Ydn[,"E0Ydn.CVTMLE"] < CI_EnYdn2[,grep("CV.TMLE", colnames(CI_EnYdn2))]))
  table_EnYdn_for_E0Ydn = data.frame(Estimator = c("Unadjusted", "G-comp.", "IPTW", "IPTW-DR", "TMLE", "CV-TMLE"),
                                     Bias = bias_EnYdn_for_E0Ydn,
                                     Variance = var_EnYdn_for_E0Ydn,
                                     MSE = MSE_EnYdn_for_E0Ydn,
                                     Coverage = NA)
  table_EnYdn_for_E0Ydn = round(table_EnYdn_for_E0Ydn[,sapply(table_EnYdn_for_E0Ydn, class) == "numeric"], 4)
  names(coverage_EnYdn_for_E0Ydn) = paste0("Psi_", substr(names(coverage_EnYdn_for_E0Ydn), start = 4, stop = nchar(names(coverage_EnYdn_for_E0Ydn))-1))
  table_EnYdn_for_E0Ydn[names(coverage_EnYdn_for_E0Ydn),"Coverage"] = coverage_EnYdn_for_E0Ydn
  table_EnYdn_for_E0Ydn$Coverage = paste0(table_EnYdn_for_E0Ydn$Coverage*100, "%")
  table_EnYdn_for_E0Ydn$Coverage[table_EnYdn_for_E0Ydn$Coverage == "NA%"] = "-"
  table_EnYdn_for_E0Ydn = table_EnYdn_for_E0Ydn[-which(rownames(table_EnYdn_for_E0Ydn) == "Psi_unadj"),]

  return(list(table_EnYdn_for_E0Yd0 = table_EnYdn_for_E0Yd0,
              table_EnYd0_for_E0Yd0 = table_EnYd0_for_E0Yd0,
              table_EnYdn_for_E0Ydn = table_EnYdn_for_E0Ydn))
}
@
\subsection{Table Simple Library}
<<echo = F>>=
make_table_fun(results = EYdopt_bin_simple)
@
\subsection{Table Medium Library}
<<echo = F>>=
make_table_fun(results = EYdopt_bin_medium)
@
\subsection{Table Aggressive Library}
<<echo = F>>=
make_table_fun(results = EYdopt_bin_most)
@



\section{Results}
<<echo = F, warning = F>>=
#results = EYdopt_bin_simple
#title = "test"

make_plot_fun = function(results, title) {

  #EnYdn
  EnYdn = do.call('rbind', lapply(results, function(x) x$EnYdn[grep("Psi_", rownames(x$EnYdn)), "EYd"]))
  colnames(EnYdn) = row.names(results[[1]]$EnYdn)[grep("Psi_", rownames(results[[1]]$EnYdn))]
  EnYdn = EnYdn[,-which(colnames(EnYdn) == "Psi_unadj")]
  df_dn = data.frame(Estimator = factor(colnames(EnYdn), levels = colnames(EnYdn)),
                     Estimates = colMeans(EnYdn),
                     minQ = apply(EnYdn, 2, quantile, probs = 0.025),
                     maxQ = apply(EnYdn, 2, quantile, probs = 0.975),
                     d_type = "dn")
  #EnYd0
  EnYd0 = do.call('rbind', lapply(results, function(x) x$EnYd0[grep("Psi_", rownames(x$EnYd0)), "EYd"]))
  colnames(EnYd0) = row.names(results[[1]]$EnYd0)[grep("Psi_", rownames(results[[1]]$EnYd0))]
  EnYd0 = EnYd0[,-which(colnames(EnYd0) == "Psi_unadj")]
  df_d0 = data.frame(Estimator = factor(colnames(EnYd0), levels = colnames(EnYd0)),
                     Estimates = colMeans(EnYd0),
                     minQ = apply(EnYd0, 2, quantile, probs = 0.025),
                     maxQ = apply(EnYd0, 2, quantile, probs = 0.975),
                     d_type = "d0")
  df = rbind(df_d0, df_dn)
  df$Estimator = factor(as.character(df$Estimator), labels = c("G-comp.", "IPTW", "IPTW-DR", "TMLE", "CV-TMLE"), levels = c("Psi_gcomp", "Psi_IPTW", "Psi_IPTW_DR", "Psi_TMLE", "Psi_CV.TMLE"))

  #E0Ydn
  E0Ydn = do.call('rbind', lapply(results, function(x) x$E0Ydn[, "EYd"]))
  colnames(E0Ydn) = row.names(results[[1]]$E0Ydn)

  pd <- position_dodge(width = 0.7)
  df %>%
    ggplot(aes(x = Estimator, y = Estimates, group = d_type)) +
    geom_point(aes(shape = d_type), position = pd, size = 2.5) +
    geom_line(aes(y = 0, colour = "red")) +
    geom_line(aes(y = 0, colour = "blue")) +
    geom_line(aes(y = 0, colour = "black")) +
    scale_shape_discrete(name = "        Rule: ", labels = c("dn" = "Estimated ODTR",
                                                             "d0" = "True ODTR")) +
    scale_colour_manual(name = "         Statistical Estimand:",
                        values = c("black", "blue", "red"),
                        labels = c("red" = parse(text = TeX('$\\Psi_{d^*_{n,CV}}$')),
                                   "blue" = parse(text = TeX('$\\Psi_{d^*_n}$')),
                                   "black" = parse(text = TeX('$\\Psi_{d^*_0}$'))))+
    ylim(c(.38,.97)) +
    geom_errorbar(aes(ymin = minQ, ymax = maxQ), width = .4, position = pd) +
    geom_hline(yintercept = mean(E0Ydn[,"E0Ydn.CVTMLE"]), colour = "red")+#, alpha=I(0.1)) +
    geom_hline(yintercept = mean(E0Ydn[,"E0Ydn.nonCVTMLE"]), colour = "blue")+#, alpha=I(0.1)) +
    geom_hline(yintercept = E0Yd0, colour = "black") +
    scale_x_discrete(name ="Estimator") +
    ylab("") +
    ggtitle(title) +
    theme_bw() +
    theme(text = element_text(size=18), panel.border = element_blank())

}

plot1 = make_plot_fun(results = EYdopt_bin_simple, title = "GLMs - least data adaptive")
#plot2 = make_plot_fun(results = EYdopt_bin_medium, title = "ML + GLMs - medium data adaptive")
plot2 = make_plot_fun(results = EYdopt_bin_medium, title = "ML + HAL + GLMs - medium data adaptive")
#plot3 = make_plot_fun(results = EYdopt_bin_most, title = "ML + GLMs - most data adaptive")
plot3 = make_plot_fun(results = EYdopt_bin_most, title = "ML + HAL + GLMs - most data adaptive")

plot1
plot2
plot3
@

\end{document}
