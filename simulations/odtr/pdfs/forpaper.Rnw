\documentclass[11pt]{article}
%\usepackage[showframe]{geometry}
\usepackage[table]{xcolor}
\usepackage{caption}
\usepackage{lscape,verbatim,mathrsfs}
\usepackage{graphics,amsmath,pstricks}
\usepackage{amssymb,enumerate}
\usepackage{amsbsy,amsmath,amsthm,amsfonts, amssymb}
\usepackage{graphicx, rotate, array}
\usepackage{geometry,multirow}
\usepackage{color,soul}
\usepackage{float}
%\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
%\renewcommand{\baselinestretch}{1.9}
\usepackage{tcolorbox}
\renewcommand{\familydefault}{cmss}
\textwidth=6.65in \textheight=9.7in
\parskip=.025in
\parindent=0in
\oddsidemargin=-0.1in \evensidemargin=-.1in \headheight=-.6in
\footskip=0.5in \DeclareMathOperator*{\argmax}{argmax}
\DeclareMathOperator*{\argmin}{argmin}


\begin{document}


<<libs_and_funs, echo = F, message = F,warning = F>>=
library(dplyr)
library(ggplot2)
library(xtable)
require(gridExtra)
library('latex2exp')
source("/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/showResults.R")
@








BIN

<<DGP_bin, echo = F>>=
# load DGP_bin stuff
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/true values/DGP_AL_bin_true_values.RData")
@

<<echo = F, results = 'asis', warning = F, fig.height=5.5, fig.width=12>>=

ODTRbin_GLM = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_GLM.RData")
ODTRbin_bliponlyparam_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyparam_discrete.RData")
ODTRbin_bliponlyparam_blipmeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyparam_blipmeta.RData")
ODTRbin_bliponlyparam_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyparam_votemeta.RData")
ODTRbin_bliponlyML_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyML_discrete.RData")
ODTRbin_bliponlyML_blipmeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyML_blipmeta.RData")
ODTRbin_bliponlyML_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_bliponlyML_votemeta.RData")
ODTRbin_all_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_all_discrete.RData")
ODTRbin_all_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRbin_all_votemeta.RData")



makeplotdf_ODTR = function(x, ODTR) {

    estimates = ODTR[[x]]
    est = estimates[,grep(colnames(estimates), pattern = "EYdn")]
    match_dopt = mean(estimates[,grep(colnames(estimates), pattern = "match")])
    mean_dopt = colMeans(estimates[,grep(colnames(estimates), pattern = "mean_dopt")])
    df = data.frame(Library = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][1]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]-1),
                    Metalearner = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][3]-1),
                    Risk = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][3]+1, stop = nchar(names(ODTR[x]))),
                    Estimates = mean(est),
                    minQ = quantile(est, probs = 0.025),
                    maxQ = quantile(est, probs = 0.975))
    df = cbind(df, match_dopt, t(mean_dopt))

    return(df)

  }

odtr = rbind(do.call("rbind", lapply(1:length(ODTRbin_GLM), makeplotdf_ODTR, ODTR = ODTRbin_GLM)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_discrete), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_discrete)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_blipmeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_blipmeta)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_votemeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_votemeta)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyML_discrete), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyML_discrete)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyML_blipmeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyML_blipmeta)),
             do.call("rbind", lapply(1:length(ODTRbin_bliponlyML_votemeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyML_votemeta)),
             do.call("rbind", lapply(1:length(ODTRbin_all_discrete), makeplotdf_ODTR, ODTR = ODTRbin_all_discrete)),
             do.call("rbind", lapply(1:length(ODTRbin_all_votemeta), makeplotdf_ODTR, ODTR = ODTRbin_all_votemeta)))



# odtr = rbind(data.frame(Library = "GLM", Metalearner = "N/A", do.call("rbind", lapply(1:length(ODTRbin_GLM), makeplotdf_ODTR, ODTR = ODTRbin_GLM))),
#              data.frame(Library = "Parametric models for blip", Metalearner = "Discrete", do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_discrete), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_discrete))),
#              data.frame(Library = "Parametric models for blip", Metalearner = "Blip-based", do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_blipmeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_blipmeta))),
#              data.frame(Library = "Parametric models for blip", Metalearner = "Vote-based", do.call("rbind", lapply(1:length(ODTRbin_bliponlyparam_votemeta), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyparam_votemeta))),
#              data.frame(Library = "ML models for blip", Metalearner = "Discrete", do.call("rbind", lapply(1:length(ODTRbin_bliponlyML_discrete), makeplotdf_ODTR, ODTR = ODTRbin_bliponlyML_discrete))))

#odtr$Library = paste(odtr$Type, odtr$Library)

#odtr$Risk = as.character(odtr$Risk)
#odtr = odtr[-which(odtr$Library == "Incorrect GLM" & odtr$Risk == "MSE"),]

#odtr[odtr$Library == "Incorrect GLM" & odtr$Risk == "TMLE", "Risk"] = "N/A"

#odtr$Metalearner = as.character(odtr$Metalearner)
#odtr[odtr$Library == "Incorrect GLM" & odtr$Metalearner == "Blip-based", "Metalearner"] = "N/A"

odtr$Risk = factor(odtr$Risk, labels = c("N/A", "CV MSE", "CV TMLE", "CV TMLE CI"), levels = c("NA", "CVMSE", "CVTMLE", "CVTMLECI"))
odtr$Metalearner = factor(odtr$Metalearner, labels = c("N/A", "Discrete", "Blip-based", "Vote-based"), levels = c("NA", "discrete", "blipmeta", "votemeta"))
odtr$Library = factor(odtr$Library, labels = c("Incorrect GLM", "Parametric blip models", "Parametric + ML blip models", "Blip models and EYd maximizers"), levels = c("incorrectglm", "bliponlyparam", "bliponlyML", "all")) #need to add

truevalues = DGP_AL_bin_true_values

odtr$ALL = factor(paste(odtr$Risk, odtr$Metalearner, odtr$Library))

pd <- position_dodge(width = 0.7)

dgpbin = odtr %>%
  ggplot(aes(x = Metalearner, y = Estimates, group = ALL, shape = Risk, col = Library)) +
  geom_point(size = 4, position = pd) +
  geom_errorbar(aes(ymin = minQ, ymax = maxQ, col = Library), width = .4, position = pd) +
  geom_hline(yintercept = (truevalues$EYd_star), colour = "black") +
  scale_shape_manual(name = "Risk", values = c(5,15,17,19)) + #labels = c("N/A" = "N/A",
                                    #             "CV MSE" = parse(text = TeX('$R_{MSE}$')),
                                     #            "CV TMLE" = parse(text = TeX('$R_{E[Yd]}$')),
                                      #         "CV TMLE CI" = parse(text = TeX('R_{CI E[Yd]}$'))),

  scale_colour_manual(values = c("dark gray", "blue", "red", "dark green")) + # this is for library
#    scale_x_discrete(limits=levels(odtr$Metalearner),
#                  name = "Metalearner")+
  scale_x_discrete(limits=levels(odtr$Metalearner),
                  # labels=c("N/A" = "N/A",
                  #          'Discrete' = parse(text = TeX('Discrete')),
                  #          'Blip-based' = parse(text = TeX('Blip-based $d^*_{n,B}$')),
                  #          'Vote-based' = parse(text = TeX('Vote-based $d^*_{n,d}$'))),
                   name = "Metalearner")+
  geom_line(key_glyph = draw_key_label)+
#  ylab(parse(text = TeX('$E_{n}[Q_{0}(Y|A=d_{n},W)]$'))) +
  ylab(expression(paste(E[n],"[",Q[0], "(", Y, "|", A, "=", d[n]^{"*"},", ", W, ")]"))) +
  ggtitle("Simulation Results: Binary Outcome") +
  ylim(min(odtr$minQ)-.005, max(odtr$maxQ, truevalues$EYd_star)+.03) +
  theme_bw() +
  theme(panel.border = element_blank()) +
  annotate("text", x = 1, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "N/A N/A Incorrect GLM"])*100, 1),"%"),
           colour = "dark gray") +
  annotate("text", x = 2-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Discrete Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 2, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
          label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Discrete Parametric blip models"])*100, 1),"%"),
          colour = "blue") +
  annotate("text", x = 2+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Discrete Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 3-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 3, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 3+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 4-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Vote-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 4+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Vote-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
  annotate("text", x = 5-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
  annotate("text", x = 5, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
  annotate("text", x = 5+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
  annotate("text", x = .5, y = max(odtr$maxQ, truevalues$EYd_star) + .02, xmin = -0.5,
           label = "~underline('% match:')",
           colour = "black", parse = TRUE)







@

<<results = 'asis', echo = F>>=
maketable_ODTR(ODTR_step1a_bin, truevalues = DGP_AL_bin_true_values, caption = "bin - 1a")
maketable_ODTR(ODTR_step1b_bin, truevalues = DGP_AL_bin_true_values, caption = "bin - 1b")
maketable_ODTR(ODTR_step1c_bin, truevalues = DGP_AL_bin_true_values, caption = "bin - 1c")
maketable_ODTR(ODTR_step5a_bin, truevalues = DGP_AL_bin_true_values, caption = "bin - step5a")
@

















CONT

<<DGP_cont, echo = F>>=
# load DGP_smooth2 stuff
load(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/true values/DGP_smooth2_true_values.RData")
@


<<echo = F, results = 'asis', warning = F, fig.height=5.5, fig.width=12>>=

ODTRcont_GLM = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_GLM.RData")
ODTRcont_bliponlyparam_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyparam_discrete.RData")
ODTRcont_bliponlyparam_blipmeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyparam_blipmeta.RData")
ODTRcont_bliponlyparam_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyparam_votemeta.RData")
ODTRcont_bliponlyML_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyML_discrete.RData")
ODTRcont_bliponlyML_blipmeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyML_blipmeta.RData")
ODTRcont_bliponlyML_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_bliponlyML_votemeta.RData")
ODTRcont_all_discrete = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_all_discrete.RData")
ODTRcont_all_votemeta = load_object(file = "/Users/linamontoya/Box Sync/Dissertation/SL.ODTR/simulations/odtr/results/ODTRcont_all_votemeta.RData")



makeplotdf_ODTR = function(x, ODTR) {

    estimates = ODTR[[x]]
    est = estimates[,grep(colnames(estimates), pattern = "EYdn")]
    match_dopt = mean(estimates[,grep(colnames(estimates), pattern = "match")])
    mean_dopt = colMeans(estimates[,grep(colnames(estimates), pattern = "mean_dopt")])
    df = data.frame(Library = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][1]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]-1),
                    Metalearner = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][3]-1),
                    Risk = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][3]+1, stop = nchar(names(ODTR[x]))),
                    Estimates = mean(est),
                    minQ = quantile(est, probs = 0.025),
                    maxQ = quantile(est, probs = 0.975))
    df = cbind(df, match_dopt, t(mean_dopt))

    return(df)

  }

odtr = rbind(do.call("rbind", lapply(1:length(ODTRcont_GLM), makeplotdf_ODTR, ODTR = ODTRcont_GLM)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyparam_discrete), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyparam_discrete)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyparam_blipmeta), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyparam_blipmeta)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyparam_votemeta), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyparam_votemeta)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyML_discrete), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyML_discrete)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyML_blipmeta), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyML_blipmeta)),
             do.call("rbind", lapply(1:length(ODTRcont_bliponlyML_votemeta), makeplotdf_ODTR, ODTR = ODTRcont_bliponlyML_votemeta)),
            do.call("rbind", lapply(1:length(ODTRcont_all_discrete), makeplotdf_ODTR, ODTR = ODTRcont_all_discrete)),
            do.call("rbind", lapply(1:length(ODTRcont_all_votemeta), makeplotdf_ODTR, ODTR = ODTRcont_all_votemeta)))



odtr$Risk = factor(odtr$Risk, labels = c("N/A", "CV MSE", "CV TMLE", "CV TMLE CI"), levels = c("NA", "CVMSE", "CVTMLE", "CVTMLECI"))
odtr$Metalearner = factor(odtr$Metalearner, labels = c("N/A", "Discrete", "Blip-based", "Vote-based"), levels = c("NA", "discrete", "blipmeta", "votemeta"))
odtr$Library = factor(odtr$Library, labels = c("Correct GLM", "Incorrect GLM", "Parametric blip models", "Parametric + ML blip models", "Blip models and EYd maximizers"), levels = c("correctglm", "incorrectglm", "bliponlyparam", "bliponlyML", "all")) #need to add

truevalues = DGP_smooth2_true_values

odtr$ALL = factor(paste(odtr$Risk, odtr$Metalearner, odtr$Library))

pd <- position_dodge(width = 0.7)

dgpcont = odtr %>%
  ggplot(aes(x = Metalearner, y = Estimates, group = ALL, shape = Risk, col = Library)) +
  geom_point(size = 4, position = pd) +
  geom_errorbar(aes(ymin = minQ, ymax = maxQ, col = Library), width = .4, position = pd) +
  geom_hline(yintercept = (truevalues$EYd_star), colour = "black") +
  scale_shape_manual(name = "Risk", values = c(5,15,17,19)) + #labels = c("N/A" = "N/A",
                                    #             "CV MSE" = parse(text = TeX('$R_{MSE}$')),
                                     #            "CV TMLE" = parse(text = TeX('$R_{E[Yd]}$')),
                                      #         "CV TMLE CI" = parse(text = TeX('R_{CI E[Yd]}$'))),

  scale_colour_manual(values = c("black", "dark gray", "blue", "red", "dark green")) + # this is for library
#    scale_x_discrete(limits=levels(odtr$Metalearner),
#                  name = "Metalearner")+
  scale_x_discrete(limits=levels(odtr$Metalearner),
                  # labels=c("N/A" = "N/A",
                  #          'Discrete' = parse(text = TeX('Discrete')),
                  #          'Blip-based' = parse(text = TeX('Blip-based $d^*_{n,B}$')),
                  #          'Vote-based' = parse(text = TeX('Vote-based $d^*_{n,d}$'))),
                   name = "Metalearner")+
  geom_line(key_glyph = draw_key_label)+
#  ylab(parse(text = TeX('$E_{n}[Q_{0}(Y|A=d_{n},W)]$'))) +
  ylab(expression(paste(E[n],"[",Q[0], "(", Y, "|", A, "=", d[n]^{"*"},", ", W, ")]"))) +
  ggtitle("Simulation Results: Continuous Outcome") +
  ylim(min(odtr$minQ)-.005, max(odtr$maxQ, truevalues$EYd_star)+.1) +
  theme_bw() +
  theme(panel.border = element_blank()) +
  annotate("text", x = 1-.17, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "N/A N/A Correct GLM"])*100, 1),"%"),
           colour = "black") +
  annotate("text", x = 1+.2, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "N/A N/A Incorrect GLM"])*100, 1),"%"),
           colour = "dark gray") +

  annotate("text", x = 2-.35, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 2-.25, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Discrete Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 2-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Discrete Blip models and EYd maximizers"])*100, 1),"%"),
           colour = "dark green") +
    annotate("text", x = 2-.05, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 2+.05, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Discrete Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 2+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Discrete Blip models and EYd maximizers"])*100, 1),"%"),
           colour = "dark green") +
    annotate("text", x = 2+.25, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Discrete Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 2+.35, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Discrete Parametric blip models"])*100, 1),"%"),
           colour = "blue") +

    annotate("text", x = 3-.3, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Blip-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 3-.25, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 3-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Blip-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 3+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 3+.25, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Blip-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 3+.3, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Blip-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +

    annotate("text", x = 4-.3, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Vote-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 4-.25, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV MSE Vote-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 4-.2, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Vote-based Blip models and EYd maximizers"])*100, 1),"%"),
           colour = "dark green") +
    annotate("text", x = 4-.15, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Vote-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 4+.15, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE CI Vote-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +
    annotate("text", x = 4+.2, y = max(odtr$maxQ, truevalues$EYd_star)+.02,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Vote-based Blip models and EYd maximizers"])*100, 1),"%"),
           colour = "dark green") +
    annotate("text", x = 4+.25, y = max(odtr$maxQ, truevalues$EYd_star)+.08,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Vote-based Parametric + ML blip models"])*100, 1),"%"),
           colour = "red") +
    annotate("text", x = 4+.3, y = max(odtr$maxQ, truevalues$EYd_star)+.05,
           label = paste0(round(unique(odtr$match_dopt[odtr$ALL == "CV TMLE Vote-based Parametric blip models"])*100, 1),"%"),
           colour = "blue") +

  annotate("text", x = .5, y = max(odtr$maxQ, truevalues$EYd_star) + .05, xmin = -0.5,
           label = "~underline('% match:')",
           colour = "black", parse = TRUE)
dgpcont

@


<<>>=
grid.arrange(dgp1, dgp2, nrow=2)

@

<<results = 'asis', echo = F>>=

maketable_ODTR = function(ODTR, truevalues, caption, scalebox = .7){

  makedftable_ODTR = function(x, ODTR, truevalues){

    estimates = ODTR[x]
    est = estimates[[1]][,grep(colnames(estimates[[1]]), pattern = "EYdn_")]
    #colnames(est) = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][1]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]-1)
    truth = as.numeric(truevalues["EYd_star"])
    Bias = mean(est - truth)
    Variance = var(est)
    MSE = mean((est - truth)^2)
    coefs = colMeans(data.frame(estimates[[1]][,grep(colnames(estimates[[1]]), pattern = "coef")]))
    toreturn = data.frame(Bias, Variance, MSE, t(coefs))
    rownames(toreturn) = substr(names(ODTR[x]), start = gregexpr(pattern ='_', names(ODTR[x]))[[1]][1]+1, stop = gregexpr(pattern ='_', names(ODTR[x]))[[1]][2]-1)

    return(toreturn)
  }

  df = do.call("rbind", lapply(1:length(ODTR), makedftable_ODTR, ODTR = ODTR, truevalues = truevalues))
  return(df)

}


#fortable = lapply(list(ODTR_step1a_smooth, ODTR_step1b_smooth, ODTR_step1c_smooth, ODTR_step5a_smooth), FUN = maketable_ODTR, truevalues = DGP_smooth_true_values)
#write.csv(do.call('rbind', lapply(fortable, function(x) x[,c("Bias", "Variance", "MSE")])), "simulations/tables/DGP1.csv")

fortable2 = lapply(list(ODTR_step1a_smooth2, ODTR_step1b_smooth2, ODTR_step1c_smooth2, ODTR_step5a_smooth2), FUN = maketable_ODTR, truevalues = DGP_AL_bin_true_values)
write.csv(do.call('rbind', lapply(fortable2, function(x) x[,c("Bias", "Variance", "MSE")])), "simulations/odtr/tables/DGP2.csv")

fortable3 = lapply(list(ODTR_step1a_smooth2, ODTR_step1b_smooth2, ODTR_step1c_smooth2, ODTR_step5a_smooth2), FUN = maketable_ODTR, truevalues = DGP_smooth2_true_values)
write.csv(do.call('rbind', lapply(fortable3, function(x) x[,c("Bias", "Variance", "MSE")])), "simulations/odtr/tables/DGP3.csv")


colnames = c("blip_SL.glm", "blip_SL.mean", "blip_SL.glm.interaction", "blip_SL.earth", "blip_SL.nnet", "blip_SL.svm", "blip_SL.rpart", "Qlearn", "OWL", "EARL", "optclass", "RWL", "Treat all", "Treat none")

#fortable[[1]] = data.frame(subset(fortable[[1]], select = -c(Bias, Variance, MSE)), Qlearn = NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
#colnames(fortable[[1]]) = colnames

#fortable[[2]] = subset(fortable[[2]], select = -c(Bias, Variance, MSE))
#colnames(fortable[[2]]) = colnames

#fortable[[3]] = data.frame(subset(fortable[[3]], select = -c(Bias, Variance, MSE)), Qlearn = #NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
#colnames(fortable[[3]]) = colnames

#fortable[[4]] = NULL

#write.csv(t(do.call('rbind', fortable)), "simulations/tables/coefsDGP1.csv")


fortable2[[1]] = data.frame(subset(fortable2[[1]], select = -c(Bias, Variance, MSE)), Qlearn = NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
colnames(fortable2[[1]]) = colnames

fortable2[[2]] = subset(fortable2[[2]], select = -c(Bias, Variance, MSE))
colnames(fortable2[[2]]) = colnames

fortable2[[3]] = data.frame(subset(fortable2[[3]], select = -c(Bias, Variance, MSE)), Qlearn = NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
colnames(fortable2[[3]]) = colnames

fortable2[[4]] = NULL

write.csv(t(do.call('rbind', fortable2)), "simulations/odtr/tables/coefsDGP2.csv")





fortable3[[1]] = data.frame(subset(fortable3[[1]], select = -c(Bias, Variance, MSE)), Qlearn = NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
colnames(fortable3[[1]]) = colnames

fortable3[[2]] = subset(fortable3[[2]], select = -c(Bias, Variance, MSE))
colnames(fortable3[[2]]) = colnames

fortable3[[3]] = data.frame(subset(fortable3[[3]], select = -c(Bias, Variance, MSE)), Qlearn = NA, OWL = NA, EARL = NA, optclass = NA, RWL = NA, NA, NA)
colnames(fortable3[[3]]) = colnames

fortable3[[4]] = NULL

write.csv(t(do.call('rbind', fortable3)), "simulations/odtr/tables/coefsDGP3.csv")
@






\end{document}
